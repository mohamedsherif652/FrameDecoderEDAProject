-- VHDL data flow description generated from `frame_decoder_a_optimized`
--		date : Sun May 14 08:01:23 2017


-- Entity Declaration

ENTITY frame_decoder_a_optimized IS
  PORT (
  vdd : in BIT;	-- vdd
  vss : in BIT;	-- vss
  clk : in BIT;	-- clk
  reset : in BIT;	-- reset
  err : out BIT;	-- err
  word_in : in bit_vector(7 DOWNTO 0) ;	-- word_in
  address : out bit_vector(7 DOWNTO 0) ;	-- address
  data : out bit_vector(7 DOWNTO 0) 	-- data
  );
END frame_decoder_a_optimized;


-- Architecture Declaration

ARCHITECTURE behaviour_data_flow OF frame_decoder_a_optimized IS
  SIGNAL frame_decoder_cs : REG_VECTOR(3 DOWNTO 0) REGISTER;	-- frame_decoder_cs
  SIGNAL aux0 : BIT;		-- aux0
  SIGNAL aux1 : BIT;		-- aux1
  SIGNAL aux2 : BIT;		-- aux2
  SIGNAL aux3 : BIT;		-- aux3
  SIGNAL aux4 : BIT;		-- aux4
  SIGNAL aux5 : BIT;		-- aux5
  SIGNAL aux8 : BIT;		-- aux8
  SIGNAL aux9 : BIT;		-- aux9
  SIGNAL aux10 : BIT;		-- aux10
  SIGNAL aux11 : BIT;		-- aux11
  SIGNAL aux12 : BIT;		-- aux12
  SIGNAL aux13 : BIT;		-- aux13

BEGIN
  aux13 <= (aux2 AND aux0);
  aux12 <= (frame_decoder_cs(0) OR NOT(frame_decoder_cs(2)));
  aux11 <= (NOT(word_in(5)) AND NOT(word_in(6)));
  aux10 <= (NOT(reset) AND NOT(frame_decoder_cs(2)));
  aux9 <= NOT(word_in(2) OR word_in(4));
  aux8 <= ((frame_decoder_cs(3) OR frame_decoder_cs(2)) AND
 (NOT(frame_decoder_cs(1)) AND NOT(reset)));
  aux5 <= (aux4 AND NOT(frame_decoder_cs(2)));
  aux4 <= (frame_decoder_cs(1) AND NOT(reset));
  aux3 <= (aux2 AND aux1);
  aux2 <= (frame_decoder_cs(0) OR frame_decoder_cs(2));
  aux1 <= (aux0 AND NOT(reset));
  aux0 <= (frame_decoder_cs(1) OR frame_decoder_cs(0));
  label0 : BLOCK ((clk AND NOT((clk'STABLE))) = '1')
  BEGIN
    frame_decoder_cs (0) <= GUARDED (frame_decoder_cs(3) AND frame_decoder_cs(1) AND 
NOT(reset) AND frame_decoder_cs(2));
  END BLOCK label0;
  label1 : BLOCK ((clk AND NOT((clk'STABLE))) = '1')
  BEGIN
    frame_decoder_cs (1) <= GUARDED ((frame_decoder_cs(1) OR aux11) AND (
frame_decoder_cs(1) OR (NOT(word_in(3)) AND word_in(7) AND NOT(
word_in(1)))) AND ((frame_decoder_cs(3) AND aux9) OR 
frame_decoder_cs(1)) AND aux10);
  END BLOCK label1;
  label2 : BLOCK ((clk AND NOT((clk'STABLE))) = '1')
  BEGIN
    frame_decoder_cs (2) <= GUARDED ((NOT(frame_decoder_cs(3)) OR aux12) AND aux1);
  END BLOCK label2;
  label3 : BLOCK ((clk AND NOT((clk'STABLE))) = '1')
  BEGIN
    frame_decoder_cs (3) <= GUARDED ((aux12 AND ((NOT(frame_decoder_cs(3)) AND 
frame_decoder_cs(1)) OR frame_decoder_cs(0)) AND NOT(reset)) OR (NOT
(frame_decoder_cs(3)) AND word_in(2) AND 
word_in(4) AND NOT(reset) AND word_in(3) AND NOT(word_in(7)
) AND word_in(1) AND NOT(frame_decoder_cs(2)) AND 
NOT(word_in(0)) AND word_in(5) AND word_in(6)) OR (
frame_decoder_cs(3) AND NOT(frame_decoder_cs(1)) AND NOT(word_in(2))
 AND NOT(word_in(4)) AND NOT(reset) AND NOT(
word_in(3)) AND word_in(7) AND NOT(word_in(1)) AND NOT(
frame_decoder_cs(2)) AND NOT(word_in(0)) AND aux11));
  END BLOCK label3;

data (0) <= (aux3 AND word_in(0));

data (1) <= (aux2 AND aux1 AND word_in(1));

data (2) <= (aux13 AND word_in(2) AND NOT(reset));

data (3) <= (aux2 AND aux1 AND word_in(3));

data (4) <= (aux13 AND word_in(4) AND NOT(reset));

data (5) <= (aux3 AND word_in(5));

data (6) <= (aux3 AND word_in(6));

data (7) <= (aux2 AND aux1 AND word_in(7));

address (0) <= (aux5 AND word_in(0));

address (1) <= (aux4 AND word_in(1) AND NOT(frame_decoder_cs(2))
);

address (2) <= (frame_decoder_cs(1) AND word_in(2) AND aux10);

address (3) <= (aux4 AND word_in(3) AND NOT(frame_decoder_cs(2))
);

address (4) <= (frame_decoder_cs(1) AND word_in(4) AND aux10);

address (5) <= (aux5 AND word_in(5));

address (6) <= (aux5 AND word_in(6));

address (7) <= (aux4 AND word_in(7) AND NOT(frame_decoder_cs(2))
);

err <= (((NOT(word_in(2)) OR word_in(4) OR word_in(3) OR
 NOT(word_in(7)) OR NOT(word_in(1)) OR NOT(
frame_decoder_cs(2)) OR NOT(word_in(0)) OR NOT(word_in(5))) AND aux8
 AND word_in(6)) OR ((NOT(aux9) OR word_in(3) OR 
NOT(word_in(7)) OR word_in(1) OR frame_decoder_cs(2)
 OR word_in(5)) AND aux8 AND NOT(word_in(6))));
END;
