library ieee;
use ieee.std_logic_1164.all;

entity frame_decoder is
  port (
	vdd: in bit;
	vss: in bit;
	clk: in bit;
	reset: in bit;
	err: out bit;
	word_in: in bit_vector(7 downto 0);
	address: out bit_vector(7 downto 0);
	data: out bit_vector(7 downto 0)
  );
end frame_decoder; -- frame_decoder

architecture fd_fsm_mealy of frame_decoder is
	
	type STATE is (S1, S2, S3, S4, S5, S6, S7, S8, S9);
	signal CS, NS: STATE;
	-- Synthesis directives :
	-- pragma current_state CS
	-- pragma next_state NS
	-- pragma clock clk
	

--two process mealy

begin

	reset_and_clk_gen : process(clk)
	begin
		if (clk = '1' and not clk'stable) then
			CS <= NS;
		end if;
	end process ; -- reset_and_clk_gen

	NS_generator : process(CS, word_in, reset)
	--variable vaddress : std_logic_vector(7 downto 0) := X"00";
	--variable vdata : std_logic_vector(7 downto 0) := X"00";
	begin
		if reset = '1' then
			NS <= S1;
			--vaddress := X"00";
			--vdata := X"00";
			err <= '0';
			data <= X"00";
			address <= X"00";
		else
			case CS is
			when S1 =>
				if word_in = X"7E" then			
					address <= X"00";
					data <= x"00";
					err <= '0';
					NS <= S2;
				else
					address <= X"00";
					data <= X"00";
					err <= '0';		
					NS <= S1;
				end if ;

			when S2 =>
				if word_in = X"80" then
					address <= X"00";
					data <= X"00";
					err <= '0';
					NS <= S3;
				elsif word_in = X"81" then
					address <= X"00";
					data <= X"00";
					err <= '0';
					NS <= S4;
				else
					address <= X"00";
					data <= X"00";
					err <= '1';
					NS <= S1;
				end if ;

			when S3 =>
				address <= word_in;
				--vaddress :=  address;
				data <= X"00";
				err <= '0';
				NS <= S5;

			when S5 =>
				--address <= vaddress;
				data <= word_in;
				--vdata := data;
				err <= '0';
				NS <= S7;
			when S7 =>
				
				if word_in = X"E7" then
					err <= '0';
					NS <= S1;
				else

					address <= X"00";
					data <= X"00";
					err <= '1';
					NS <= S1;
				end if ;

			when S4 => 
				
				address <= word_in;
				--vaddress := address;
				data <= X"00";
				err <= '0';
				NS <= S6;

			when S6 =>
				address <= x"00";
				data <= word_in;
				--vdata := vdata;
				err <= '0';
				NS <= S8;

			when S8 =>
				data <= word_in;
				--vdata := data;
				err <= '0';
				NS <= S9;

			when S9 =>
				if word_in = X"E7" then
					address <= X"00";
					data <= X"00";
					err <= '0';
					NS <= S1;
				else
					address <= X"00";
					data <= X"00";
					err <= '1';		
					NS <= S1;	
				end if ;
			end case ;
		end if ;

	end process ; -- next_state_generator

end fd_fsm_mealy; -- fd_fsm_mealy
